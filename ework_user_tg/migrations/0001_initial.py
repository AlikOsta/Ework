# Generated by Django 5.2 on 2025-07-09 17:21

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('ework_config', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TelegramUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telegram_id', models.BigIntegerField(help_text='Telegram ID', unique=True, verbose_name='Telegram ID')),
                ('username', models.CharField(help_text='Telegram @Username', max_length=30, unique=True, verbose_name='Telegram Username')),
                ('first_name', models.CharField(blank=True, help_text='Имя', max_length=50, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, help_text='Фамилия', max_length=50, null=True, verbose_name='Фамилия')),
                ('photo_url', models.URLField(blank=True, help_text='URL на фото', null=True, verbose_name='URL фото')),
                ('language', models.CharField(choices=[('ru', 'Russian'), ('uk', 'Ukrainian')], default='ru', max_length=10, verbose_name='Язык интерфейса')),
                ('phone', models.CharField(blank=True, help_text='Номер телефона', max_length=15, null=True, unique=True, verbose_name='Номер телефона')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('balance', models.IntegerField(default=0, help_text='Баланс', verbose_name='Баланс')),
                ('city', models.ForeignKey(blank=True, help_text='Город', null=True, on_delete=django.db.models.deletion.PROTECT, to='ework_config.city', verbose_name='Город')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(help_text='Рейтинг', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Рейтинг')),
                ('comment', models.TextField(blank=True, help_text='Комментарий', max_length=550, null=True, verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления', verbose_name='Дата обновления')),
                ('from_user', models.ForeignKey(help_text='Кого оцениваем', on_delete=django.db.models.deletion.CASCADE, related_name='given_ratings', to=settings.AUTH_USER_MODEL, verbose_name='Кого оцениваем')),
                ('to_user', models.ForeignKey(help_text='Кто оценивает', on_delete=django.db.models.deletion.CASCADE, related_name='received_ratings', to=settings.AUTH_USER_MODEL, verbose_name='Кто оценивает')),
            ],
            options={
                'verbose_name': 'Оценка',
                'verbose_name_plural': 'Оценки',
                'ordering': ['-created_at'],
                'constraints': [models.UniqueConstraint(fields=('from_user', 'to_user'), name='unique_user_rating')],
            },
        ),
    ]
