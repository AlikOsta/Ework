"""
–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
"""
from django.core.management.base import BaseCommand
from ework_core.tasks import archive_expired_posts, get_expiry_stats


class Command(BaseCommand):
    help = '–†—É—á–Ω–æ–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ—Å—Ç–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument('--run', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ')
        parser.add_argument('--stats', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')

    def handle(self, *args, **options):
        if options['stats']:
            self.show_stats()
        elif options['run']:
            self.run_archive()
        else:
            self.stdout.write('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --run –∏–ª–∏ --stats')

    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = get_expiry_stats()
        
        if 'error' in stats:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {stats["error"]}'))
            return
        
        self.stdout.write('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤:')
        self.stdout.write(f'–ò—Å—Ç–µ–∫—à–∏–µ: {stats["expired_posts"]}')
        self.stdout.write(f'–ò—Å—Ç–µ–∫–∞—é—Ç —Å–∫–æ—Ä–æ: {stats["expiring_soon"]}')
        self.stdout.write(f'–°—Ä–æ–∫: {stats["expiry_days"]} –¥–Ω–µ–π')

    def run_archive(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        result = archive_expired_posts()
        
        if result['success']:
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {result["archived_count"]} –ø–æ—Å—Ç–æ–≤')
            )
        else:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {result["error"]}')
            )