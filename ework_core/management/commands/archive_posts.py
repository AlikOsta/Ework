"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ—Å—Ç–æ–≤
"""
from django.core.management.base import BaseCommand
from ework_core.tasks import archive_expired_posts, get_expiry_stats


class Command(BaseCommand):
    help = '–†—É—á–Ω–æ–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ—Å—Ç–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Ö',
        )
        parser.add_argument(
            '--stats',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–µ–∫–∞—é—â–∏–º –ø–æ—Å—Ç–∞–º',
        )

    def handle(self, *args, **options):
        if options['stats']:
            self.show_stats()
        elif options['dry_run']:
            self.dry_run()
        else:
            self.archive_posts()

    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–µ–∫–∞—é—â–∏–º –ø–æ—Å—Ç–∞–º"""
        self.stdout.write('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–µ–∫–∞—é—â–∏–º –ø–æ—Å—Ç–∞–º:')
        self.stdout.write('-' * 40)
        
        stats = get_expiry_stats()
        
        if 'error' in stats:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {stats["error"]}')
            )
            return
        
        self.stdout.write(f'–ò—Å—Ç–µ–∫—à–∏–µ –ø–æ—Å—Ç—ã: {stats["expired_posts"]}')
        self.stdout.write(f'–ò—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è: {stats["expiring_soon"]}')
        self.stdout.write(f'–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {stats["expiry_days"]} –¥–Ω–µ–π')

    def dry_run(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã"""
        from django.utils import timezone
        from datetime import timedelta
        from ework_config.models import SiteConfig
        from ework_post.models import AbsPost
        
        self.stdout.write('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ—Å—Ç–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º):')
        self.stdout.write('-' * 50)
        
        config = SiteConfig.get_config()
        expiry_days = config.post_expiry_days
        expiry_date = timezone.now() - timedelta(days=expiry_days)
        
        expired_posts = AbsPost.objects.filter(
            status=3,
            is_deleted=False,
            created_at__lt=expiry_date
        ).select_related('user', 'sub_rubric')
        
        if not expired_posts:
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è')
            )
            return
        
        self.stdout.write(f'–ù–∞–π–¥–µ–Ω–æ {expired_posts.count()} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ—Å—Ç–æ–≤:')
        self.stdout.write(f'–°—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {expiry_days} –¥–Ω–µ–π')
        self.stdout.write(f'–î–∞—Ç–∞ –æ—Ç—Å–µ—á–∫–∏: {expiry_date.strftime("%Y-%m-%d %H:%M:%S")}')
        self.stdout.write('-' * 30)
        
        for post in expired_posts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            days_old = (timezone.now() - post.created_at).days
            self.stdout.write(
                f'ID: {post.id} | {post.title[:30]}... | '
                f'–í–æ–∑—Ä–∞—Å—Ç: {days_old} –¥–Ω–µ–π | –ê–≤—Ç–æ—Ä: {post.user.username}'
            )
        
        if expired_posts.count() > 10:
            remaining = expired_posts.count() - 10
            self.stdout.write(f'... –∏ –µ—â–µ {remaining} –ø–æ—Å—Ç–æ–≤')

    def archive_posts(self):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ—Å—Ç—ã"""
        self.stdout.write('üóÇÔ∏è  –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ—Å—Ç–æ–≤...')
        
        result = archive_expired_posts()
        
        if result['success']:
            self.stdout.write(
                self.style.SUCCESS(
                    f'‚úÖ –£—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {result["archived_count"]} –ø–æ—Å—Ç–æ–≤'
                )
            )
            self.stdout.write(f'–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {result["expiry_days"]} –¥–Ω–µ–π')
        else:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {result["error"]}')
            )