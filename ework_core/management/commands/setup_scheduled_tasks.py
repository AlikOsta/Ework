"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á Django RQ
"""
from django.core.management.base import BaseCommand
from django_rq import get_scheduler
import django_rq


class Command(BaseCommand):
    help = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--setup',
            action='store_true',
            help='–°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏',
        )
        parser.add_argument(
            '--status',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á',
        )
        parser.add_argument(
            '--remove',
            action='store_true',
            help='–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏',
        )

    def handle(self, *args, **options):
        if options['setup']:
            self.setup_schedules()
        elif options['status']:
            self.show_status()
        elif options['remove']:
            self.remove_schedules()
        else:
            self.stdout.write('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --setup, --status –∏–ª–∏ --remove')

    def setup_schedules(self):
        """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
        self.stdout.write('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á...')
        
        try:
            scheduler = get_scheduler('default')
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ç–µ–º–∏ –∂–µ –∏–º–µ–Ω–∞–º–∏
            for job in scheduler.get_jobs():
                if job.id in ['archive_expired_posts']:
                    job.delete()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00)
            scheduler.cron(
                '0 0 * * *',  # cron expression –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ 00:00
                func='ework_core.tasks.archive_expired_posts',
                id='archive_expired_posts',
                replace_existing=True
            )
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:')
            )
            self.stdout.write('  - archive_expired_posts: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00')
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á: {e}')
            )

    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        try:
            scheduler = get_scheduler('default')
            jobs = scheduler.get_jobs()
            
            if not jobs:
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è  –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
                )
                return
            
            self.stdout.write('üìÖ –°—Ç–∞—Ç—É—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á:')
            self.stdout.write('-' * 50)
            
            for job in jobs:
                self.stdout.write(f"ID: {job.id}")
                self.stdout.write(f"–§—É–Ω–∫—Ü–∏—è: {job.func_name}")
                self.stdout.write(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {job.get_next_run_time()}")
                self.stdout.write('-' * 30)
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}')
            )

    def remove_schedules(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            scheduler = get_scheduler('default')
            jobs = scheduler.get_jobs()
            count = len(jobs)
            
            for job in jobs:
                job.delete()
            
            self.stdout.write(
                self.style.SUCCESS(f'üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {count} –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}')
            )