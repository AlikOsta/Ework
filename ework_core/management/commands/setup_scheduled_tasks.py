"""
–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á Django RQ
"""
from django.core.management.base import BaseCommand
from django_rq import get_scheduler


class Command(BaseCommand):
    help = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument('--setup', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏')
        parser.add_argument('--clear', action='store_true', help='–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏')

    def handle(self, *args, **options):
        if options['setup']:
            self.setup_tasks()
        elif options['clear']:
            self.clear_tasks()
        else:
            self.stdout.write('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --setup –∏–ª–∏ --clear')

    def setup_tasks(self):
        """–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            scheduler = get_scheduler('default')
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
            for job in scheduler.get_jobs():
                job.delete()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            jobs = [
                ('0 0 * * *', 'ework_core.tasks.archive_expired_posts', 'archive_posts'),
                ('0 1 * * *', 'ework_core.tasks.remove_expired_highlights', 'remove_highlights'), 
                ('0 2 * * *', 'ework_core.tasks.remove_expired_photo_addons', 'remove_photos'),
            ]
            
            for cron, func, job_id in jobs:
                job = scheduler.cron(cron, func=func)
                job.id = job_id
                job.save()
            
            self.stdout.write(self.style.SUCCESS('‚úÖ –ó–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}'))

    def clear_tasks(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"""
        try:
            scheduler = get_scheduler('default')
            count = len(scheduler.get_jobs())
            
            for job in scheduler.get_jobs():
                job.delete()
            
            self.stdout.write(self.style.SUCCESS(f'üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–¥–∞—á'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}'))