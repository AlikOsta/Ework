import asyncio
import threading
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.conf import settings
from ework_services.models import PostServices
from .telegram_bot import send_telegram_message, send_telegram_message_with_keyboard
from ework_job.models import PostJob
from .utils import moderate_post


def moderate_post_async(instance):
    """–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        print(f"üîÑ –ù–∞—á–∞–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {instance.title}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        from ework_config.utils import get_config
        config = get_config()
        
        print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:")
        print(f"   auto_moderation_enabled: {config.auto_moderation_enabled}")
        print(f"   manual_approval_required: {config.manual_approval_required}")
        
        # –õ–æ–≥–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        if not config.auto_moderation_enabled and not config.manual_approval_required:
            # –ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ - —Å—Ä–∞–∑—É –ø—É–±–ª–∏–∫—É–µ–º
            new_status = 3  # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
            print("üì¢ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            send_telegram_notification_async(instance)
        elif not config.auto_moderation_enabled and config.manual_approval_required:
            # –¢–æ–ª—å–∫–æ —Ä—É—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
            new_status = 1  # –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            print("üë§ –ü–æ—Å—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            send_admin_approval_notification(instance)
        elif config.auto_moderation_enabled and not config.manual_approval_required:
            # –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ –º–æ–¥–µ—Ä–∞—Ü–∏—è
            goods_text = f"{instance.title}\n{instance.description}"
            is_approved = moderate_post(goods_text)
            if is_approved:
                new_status = 3  # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
                print("ü§ñ –ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                send_telegram_notification_async(instance)
            else:
                new_status = 2  # –û—Ç–∫–ª–æ–Ω–µ–Ω–æ
                print("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π")
                refund_if_paid(instance)
        else:
            # –ê–≤—Ç–æ + —Ä—É—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
            goods_text = f"{instance.title}\n{instance.description}"
            is_approved = moderate_post(goods_text)
            if is_approved:
                new_status = 1  # –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–∂–¥–µ–º —Ä—É—á–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è)
                print("ü§ñ‚û°Ô∏èüë§ –ü–æ—Å—Ç –ø—Ä–æ—à–µ–ª –ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
                send_admin_approval_notification(instance)
            else:
                new_status = 2  # –û—Ç–∫–ª–æ–Ω–µ–Ω–æ
                print("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π")
                refund_if_paid(instance)
        
        print(f"üìä –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
        type(instance).objects.filter(pk=instance.pk).update(status=new_status)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        type(instance).objects.filter(pk=instance.pk).update(status=1)



def refund_if_paid(instance):
    """–í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –µ—Å–ª–∏ –ø–æ—Å—Ç –±—ã–ª –ø–ª–∞—Ç–Ω—ã–º"""
    try:
        from ework_premium.models import Payment
        # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç
        payment = Payment.objects.filter(post=instance, status='paid').first()
        if payment:
            payment.status = 'refunded'
            payment.save()
            print(f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –¥–µ–Ω—å–≥–∏ –∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π –ø–æ—Å—Ç: {payment.amount} —Ä—É–±.")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–≥: {e}")


def send_admin_approval_notification(instance):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    def send_notification():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            from ework_config.utils import get_config
            config = get_config()
            
            if not config.notification_bot_token or not config.admin_chat_id:
                print("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ chat_id")
                return
            
            message = f"""
üîç <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞!</b>

üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {instance.title}
üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {instance.description[:200]}{'...' if len(instance.description) > 200 else ''}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {instance.sub_rubric.super_rubric.name}
üìÅ <b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {instance.sub_rubric.name}
üí∞ <b>–¶–µ–Ω–∞:</b> {instance.price} {instance.currency.code}
üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {instance.city.name}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> @{getattr(instance.user, 'username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}

#moderation #post_id_{instance.id}
            """.strip()
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", 
                        callback_data=f"approve_post_{instance.id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                        callback_data=f"reject_post_{instance.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ", 
                        url=f"{config.site_url}/admin/ework_post/postjob/{instance.id}/change/" if hasattr(instance, 'experience') else f"{config.site_url}/admin/ework_post/postservices/{instance.id}/change/"
                    )
                ]
            ])
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {instance.id}")
            
            asyncio.run(send_telegram_message_with_keyboard(
                config.notification_bot_token, 
                config.admin_chat_id, 
                message,
                keyboard
            ))
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
    
    thread = threading.Thread(target=send_notification)
    thread.daemon = True
    thread.start()



def send_telegram_notification_async(instance):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    def send_notification():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            from ework_config.utils import get_config
            config = get_config()
            
            if not config.notification_bot_token or not config.admin_chat_id:
                print("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ chat_id")
                return
            
            message = f"""
–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:
–ù–∞–∑–≤–∞–Ω–∏–µ: {instance.title}
–û–ø–∏—Å–∞–Ω–∏–µ: {instance.description}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {instance.sub_rubric.super_rubric.name}
–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {instance.sub_rubric.name}
–¶–µ–Ω–∞: {instance.price} {instance.currency.code}
–ì–æ—Ä–æ–¥: {instance.city.name}
–ê–≤—Ç–æ—Ä: @{instance.user.username}
            """.strip()
            
            asyncio.run(send_telegram_message(
                config.notification_bot_token, 
                config.admin_chat_id, 
                message, 
                parse_mode=None
            ))
            print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
    
    thread = threading.Thread(target=send_notification)
    thread.daemon = True
    thread.start()


@receiver(post_save, sender=PostJob)
@receiver(post_save, sender=PostServices)
def handle_post_save(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
    –í–ê–ñ–ù–û: –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ 0 (–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
    """
    print(f"üîî –°–∏–≥–Ω–∞–ª handle_post_save: post_id={instance.id}, status={instance.status} ({instance.get_status_display()}), created={created}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å = 0 (–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
    if instance.status == 0:
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {instance.title} (—Å—Ç–∞—Ç—É—Å: {instance.get_status_display()})")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏" —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
        type(instance).objects.filter(pk=instance.pk).update(status=1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        thread = threading.Thread(target=moderate_post_async, args=(instance,))
        thread.daemon = True
        thread.start()
        print("‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    else:
        print(f"‚è∏Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–∞ {instance.title} (—Å—Ç–∞—Ç—É—Å: {instance.get_status_display()})")



@receiver(post_save, sender='ework_premium.Payment')
def handle_payment_save(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    –ö–æ–≥–¥–∞ –ø–ª–∞—Ç–µ–∂ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    """
    print(f"üîî –°–∏–≥–Ω–∞–ª handle_payment_save: payment_id={instance.id}, status={instance.status}, created={created}")
    
    if instance.status == 'paid' and instance.post:
        print(f"üí∞ –ü–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç {instance.post.title} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        print(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è: {instance.post.status} ({instance.post.get_status_display()})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
        copy_from_id = None
        if instance.addons_data and 'copy_from_id' in instance.addons_data:
            copy_from_id = instance.addons_data['copy_from_id']
            print(f"üîÑ DEBUG: –≠—Ç–æ –ø–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ {copy_from_id}")
        else:
            print(f"üîÑ DEBUG: –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç, –Ω–µ –ø–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–¥–æ–Ω—ã –∫ –ø–æ—Å—Ç—É
        instance.post.apply_addons_from_payment(instance)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç
        if copy_from_id:
            _handle_republish_after_payment(copy_from_id, instance.post, instance.user)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ—Å—Ç –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        old_status = instance.post.status
        instance.post.status = 0  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å handle_post_save
        instance.post.save(update_fields=['status'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
        instance.post.refresh_from_db()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω —Å {old_status} –Ω–∞ {instance.post.status} ({instance.post.get_status_display()})")
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é
        if instance.post.status == 0:
            print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é...")
            from threading import Thread
            thread = Thread(target=moderate_post_async, args=(instance.post,))
            thread.daemon = True
            thread.start()
        
    else:
        print(f"‚è∏Ô∏è –£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: status={instance.status}, post={instance.post}")


def _handle_republish_after_payment(old_post_id, new_post, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
    print(f"üîÑ DEBUG: _handle_republish_after_payment –≤—ã–∑–≤–∞–Ω —Å old_post_id={old_post_id}, new_post_id={new_post.id}, user={user.username}")
    try:
        from ework_post.models import AbsPost
        from ework_post.views import copy_post_views
        
        old_post = AbsPost.objects.get(
            id=old_post_id,
            user=user,
            status=4,  # –ê—Ä—Ö–∏–≤–Ω—ã–π
            is_deleted=False
        )
        
        print(f"üîÑ DEBUG: –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç {old_post_id}, —Å—Ç–∞—Ç—É—Å –î–û: {old_post.status}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        copied_views = copy_post_views(old_post, new_post)
        
        # –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π
        old_post.soft_delete()
        
        print(f"üîÑ DEBUG: –ü–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {copied_views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç {old_post_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {old_post.status}")
        
    except AbsPost.DoesNotExist:
        print(f"‚ùå DEBUG: –°—Ç–∞—Ä—ã–π –ø–æ—Å—Ç {old_post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã")
    except Exception as e:
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {e}")
        import traceback
        print(f"‚ùå DEBUG: Traceback: {traceback.format_exc()}")
