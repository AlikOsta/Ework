import asyncio
import threading
from django.db.models.signals import post_save
from django.dispatch import receiver
from ework_services.models import PostServices
from .telegram_bot import send_telegram_message, send_telegram_message_with_keyboard
from ework_job.models import PostJob
from .utils import moderate_post
import logging

config = None
logger = logging.getLogger(__name__)


def moderate_post_async(instance):
    """–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        if not config.auto_moderation_enabled and not config.manual_approval_required:
            # –ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ - —Å—Ä–∞–∑—É –ø—É–±–ª–∏–∫—É–µ–º
            new_status = 3  # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
            send_telegram_notification_async(instance)
        elif not config.auto_moderation_enabled and config.manual_approval_required:
            # –¢–æ–ª—å–∫–æ —Ä—É—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
            new_status = 1  # –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            send_admin_approval_notification(instance)
        elif config.auto_moderation_enabled and not config.manual_approval_required:
            # –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ –º–æ–¥–µ—Ä–∞—Ü–∏—è
            goods_text = f"{instance.title}\n{instance.description}"
            is_approved = moderate_post(goods_text)
            if is_approved:
                new_status = 3  # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
                send_telegram_notification_async(instance)
            else:
                new_status = 2  # –û—Ç–∫–ª–æ–Ω–µ–Ω–æ 
        else:
            # –ê–≤—Ç–æ + —Ä—É—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
            goods_text = f"{instance.title}\n{instance.description}"
            is_approved = moderate_post(goods_text)
            if is_approved:
                new_status = 1  # –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–∂–¥–µ–º —Ä—É—á–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è)
                send_admin_approval_notification(instance)
            else:
                new_status = 2  # –û—Ç–∫–ª–æ–Ω–µ–Ω–æ
        type(instance).objects.filter(pk=instance.pk).update(status=new_status)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        type(instance).objects.filter(pk=instance.pk).update(status=1)


#–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –±–æ—Ç + .telegram_bot.py
# –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –∞–¥–º–∏–Ω—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
def send_admin_approval_notification(instance):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    def send_notification():
        try:            
            if not config.bot_token or not config.admin_chat_id:
                return
            message = f"""
üîç <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞!</b>

üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {instance.title}
üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {instance.description[:200]}{'...' if len(instance.description) > 200 else ''}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {instance.sub_rubric.super_rubric.name}
üìÅ <b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {instance.sub_rubric.name}
üí∞ <b>–¶–µ–Ω–∞:</b> {instance.price} {instance.currency.code}
üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {instance.city.name}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> @{getattr(instance.user, 'username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
            """.strip()
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", 
                        callback_data=f"approve_post_{instance.id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                        callback_data=f"reject_post_{instance.id}"
                    )
                ]
            ])
            asyncio.run(send_telegram_message_with_keyboard(
                config.bot_token, 
                config.admin_chat_id, 
                message,
                keyboard
            ))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")

    thread = threading.Thread(target=send_notification)
    thread.daemon = True
    thread.start()

#–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –±–æ—Ç + .telegram_bot.py
def send_telegram_notification_async(instance):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    def send_notification():
        try:            
            if not config.bot_token or not config.admin_chat_id:
                logger.error("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return
            message = f"""
–û–±—ä—è–≤–ª–µ–Ω–∏–µ {instance.id}:
üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {instance.title}
üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {instance.description[:200]}{'...' if len(instance.description) > 200 else ''}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {instance.sub_rubric.super_rubric.name}
üìÅ <b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {instance.sub_rubric.name}
üí∞ <b>–¶–µ–Ω–∞:</b> {instance.price} {instance.currency.code}
üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {instance.city.name}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> @{getattr(instance.user, 'username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
            """.strip()
            
            asyncio.run(send_telegram_message(
                config.bot_token, 
                config.admin_chat_id, 
                message, 
                parse_mode=None
            ))
            logger.error("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    
    thread = threading.Thread(target=send_notification)
    thread.daemon = True
    thread.start()


@receiver(post_save, sender=PostJob)
@receiver(post_save, sender=PostServices)
def handle_post_save(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
    –í–ê–ñ–ù–û: –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ 0 (–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
    """    
    if instance.status == 0:
        type(instance).objects.filter(pk=instance.pk).update(status=1)
        thread = threading.Thread(target=moderate_post_async, args=(instance,))
        thread.daemon = True
        thread.start()
    else:
        logger.warning(f"‚è∏Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–∞ {instance.title} (—Å—Ç–∞—Ç—É—Å: {instance.get_status_display()})")


@receiver(post_save, sender='ework_premium.Payment')
def handle_payment_save(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    –ö–æ–≥–¥–∞ –ø–ª–∞—Ç–µ–∂ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    """    
    if instance.status == 'paid' and instance.post:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–¥–æ–Ω—ã –∫ –ø–æ—Å—Ç—É
        instance.post.apply_addons_from_payment(instance)
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ—Å—Ç –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        old_status = instance.post.status
        instance.post.status = 0  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å handle_post_save
        instance.post.save(update_fields=['status'])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
        instance.post.refresh_from_db()
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é
        if instance.post.status == 0:
            from threading import Thread
            thread = Thread(target=moderate_post_async, args=(instance.post,))
            thread.daemon = True
            thread.start()
    else:
        logger.warning(f"‚è∏Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {instance.id} (—Å—Ç–∞—Ç—É—Å: {instance.status})")

