from django.contrib import admin
from django.utils.html import format_html
from .models import PostJob


@admin.register(PostJob)
class PostJobAdmin(admin.ModelAdmin):
    list_display = ('title', 'user', 'city', 'price_display', 'status', 'is_premium', 'created_at')
    list_filter = ('status', 'is_premium', 'city', 'sub_rubric', 'created_at')
    search_fields = ('title', 'description', 'user__username', 'user__first_name', 'user__last_name')
    readonly_fields = ('created_at', 'updated_at')
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'description', 'user', 'city', 'sub_rubric')
        }),
        ('–¶–µ–Ω–∞ –∏ —É—Å–ª–æ–≤–∏—è', {
            'fields': ('price', 'currency')
        }),
        ('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã', {
            'fields': ('experience', 'work_schedule', 'work_format')
        }),
        ('–°—Ç–∞—Ç—É—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('status', 'is_premium')
        }),
        ('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('image',),
            'classes': ('collapse',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def price_display(self, obj):
        if obj.price and obj.currency:
            return f"{obj.price} {obj.currency.symbol}"
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    price_display.short_description = '–¶–µ–Ω–∞'
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('user', 'city', 'currency', 'sub_rubric')
    
    actions = ['make_premium', 'make_regular', 'approve_posts', 'reject_posts', 'archive_posts']
    
    def make_premium(self, request, queryset):
        queryset.update(is_premium=True)
        self.message_user(request, f"–°–¥–µ–ª–∞–Ω–æ –ø—Ä–µ–º–∏—É–º: {queryset.count()} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    make_premium.short_description = "–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–º–∏—É–º"
    
    def make_regular(self, request, queryset):
        queryset.update(is_premium=False)
        self.message_user(request, f"–£–±—Ä–∞–Ω–æ –ø—Ä–µ–º–∏—É–º: {queryset.count()} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    make_regular.short_description = "–£–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º"
    
    def approve_posts(self, request, queryset):
        """–û–¥–æ–±—Ä–∏—Ç—å –ø–æ—Å—Ç—ã (—Ä—É—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è)"""
        updated = queryset.filter(status=1).update(status=3)  # –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ‚Üí –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
        self.message_user(request, f"–û–¥–æ–±—Ä–µ–Ω–æ: {updated} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    approve_posts.short_description = "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –ø–æ—Å—Ç—ã"
    
    def reject_posts(self, request, queryset):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ—Å—Ç—ã (—Ä—É—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è)"""
        updated = queryset.exclude(status=2).update(status=2)  # ‚Üí –û—Ç–∫–ª–æ–Ω–µ–Ω–æ
        self.message_user(request, f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {updated} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    reject_posts.short_description = "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ—Å—Ç—ã"
    
    def archive_posts(self, request, queryset):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã"""
        updated = queryset.update(status=4)  # ‚Üí –ê—Ä—Ö–∏–≤
        self.message_user(request, f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {updated} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    archive_posts.short_description = "üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
