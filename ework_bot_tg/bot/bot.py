import os
import django
import asyncio
import logging
from logging.handlers import RotatingFileHandler
from django.utils.translation import gettext as _ 

import httpx
from aiogram import Dispatcher, types
from aiogram.client.bot import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    WebAppInfo,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
)
from asgiref.sync import sync_to_async


from ework_job.models import PostJob
from ework_services.models import PostServices

# Django setup
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ework.settings')
django.setup()

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
from ework_config.bot_config import get_bot_config
cfg = get_bot_config()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –§–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π: –¥–æ 5 —Ñ–∞–π–ª–æ–≤ –ø–æ 5 –ú–ë
file_handler = RotatingFileHandler(
    filename='bot.log',
    maxBytes=5 * 1024 * 1024,
    backupCount=5,
    encoding='utf-8'
)
file_handler.setFormatter(logging.Formatter(
    '%(asctime)s | %(name)s | %(levelname)s | %(message)s'
))

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(
    '%(levelname)s %(message)s'
))

logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
default_props = DefaultBotProperties(parse_mode="HTML")
bot = Bot(token=cfg['bot_token'], default=default_props)
welcome_text = """
–í–∞—Å –≤—ñ—Ç–∞—î Help Worküîé!

–ö—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –ø—Ä–æ –Ω–∞—à –ø—Ä–æ–µ–∫—Çüëá
‚Ä¢  –ó—Ä—É—á–Ω—ñ—Å—Ç—å: –ü–æ–¥–∞–≤–∞–π—Ç–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —á–∏ –∑–Ω–∞—Ö–æ–¥—å—Ç–µ —Ä–æ–±–æ—Ç—É –º—Ä—ñ—ó –≤ –∫—ñ–ª—å–∫–∞ –∫–ª—ñ–∫—ñ–≤.
‚Ä¢  –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ: –†–æ–∑–º—ñ—â—É–π—Ç–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–±–æ —à—É–∫–∞–π—Ç–µ —Ä–æ–±–æ—Ç—É –±–µ–∑ –∂–æ–¥–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç.
‚Ä¢  –í–µ–ª–∏–∫—ñ –æ—Ö–≤–∞—Ç–∏: –ë–∞–≥–∞—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π —ñ —à–∏—Ä–æ–∫–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è –¥–ª—è –≤–∞—à–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.
‚Ä¢  –ë–µ–∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π: –ù—ñ—è–∫–∏—Ö —Å–∫–ª–∞–¥–Ω–∏—Ö —Ñ–æ—Ä–º ‚Äî —É—Å–µ –ø—Ä–æ—Å—Ç–æ —ñ —à–≤–∏–¥–∫–æ.
üí™ –î–ª—è —à—É–∫–∞—á—ñ–≤ —Ä–æ–±–æ—Ç–∏: –õ–µ–≥–∫–æ –ø–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –≤–∞–∫–∞–Ω—Å—ñ—ó, –≤—ñ–¥–≥—É–∫—É–π—Ç–µ—Å—å —ñ –∑–Ω–∞—Ö–æ–¥—å—Ç–µ —ñ–¥–µ–∞–ª—å–Ω—É —Ä–æ–±–æ—Ç—É!
üì¢ –î–ª—è —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ–≤: –†–æ–∑–º—ñ—â—É–π—Ç–µ –≤–∞–∫–∞–Ω—Å—ñ—ó —Ç–∞ —à–≤–∏–¥–∫–æ –∑–Ω–∞—Ö–æ–¥—å—Ç–µ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤!
–ü–æ—á–∏–Ω–∞–π—Ç–µ –≤–∂–µ –∑–∞—Ä–∞–∑ ‚Äî —Ü–µ –ø—Ä–æ—Å—Ç–æ, –∑—Ä—É—á–Ω–æ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!

üì® @HelpWorkUa
"""
text_button = "–û—Ç–∫—Ä—ã—Ç—å"

start_img = ""

dp = Dispatcher()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∫–ª–∏–µ–Ω—Ç (singleton)
_http_client: httpx.AsyncClient | None = None

def get_http_client() -> httpx.AsyncClient:
    global _http_client
    if _http_client is None:
        _http_client = httpx.AsyncClient(timeout=30.0)
    return _http_client

async def create_invoice_link(
    user_id: int,
    payment_id: int,
    payload: str,
    amount: float,
    order_id: int,
    addons_data: dict | None = None
) -> str | None:
    """
    –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ HTTP API Telegram –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É
    """
    description = f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{order_id}"
    if addons_data:
        addons = []
        if addons_data.get('photo'):
            addons.append("–§–æ—Ç–æ")
        if addons_data.get('highlight'):
            addons.append("–í—ã–¥–µ–ª–µ–Ω–∏–µ")
        if addons_data.get('auto_bump'):
            addons.append("–ê–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ")
        if addons:
            description += f" —Å –æ–ø—Ü–∏—è–º–∏: {', '.join(addons)}"

    price_kopecks = int(amount * 100)
    data = {
        "title": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        "description": description,
        "payload": payload,
        "provider_token": cfg['payment_provider_token'],
        "currency": "RUB",
        "prices": [{"label": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "amount": price_kopecks}],
        "need_name": False,
        "need_phone_number": False,
        "need_email": False,
        "need_shipping_address": False,
        "send_phone_number_to_provider": False,
        "send_email_to_provider": False,
        "is_flexible": False,
    }
    url = f"https://api.telegram.org/bot{cfg['bot_token']}/createInvoiceLink"
    try:
        client = get_http_client()
        response = await client.post(url, json=data)
        response.raise_for_status()
        result = response.json()
        if result.get('ok'):
            return result['result']
        else:
            logger.error("Telegram API error creating invoice: %s", result)
    except Exception:
        logger.exception(
            "Failed to create invoice link for payment %s (user %s)",
            payment_id, user_id
        )
    return None

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    webapp_button = InlineKeyboardButton(
        text=text_button,
        web_app=WebAppInfo(url=cfg['miniapp_url'])
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])

    await message.answer_photo(
        photo='https://ibb.co/3ms35B22',  
        caption=f"{welcome_text}",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
@dp.callback_query(lambda c: c.data and (c.data.startswith('approve_post_') or c.data.startswith('reject_post_')))
async def handle_moderation_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    callback_data = callback_query.data
    
    print(f"üîî –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–ª–±–µ–∫: {callback_data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if callback_data.startswith('approve_post_'):
            action = 'approve'
            post_id = callback_data.replace('approve_post_', '')
        elif callback_data.startswith('reject_post_'):
            action = 'reject'
            post_id = callback_data.replace('reject_post_', '')
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data}")
            await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
            return
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞: action={action}, post_id={post_id}")
        
        # –ò—â–µ–º –ø–æ—Å—Ç –≤ –¥–≤—É—Ö –º–æ–¥–µ–ª—è—Ö
        post = None
        try:
            post = await sync_to_async(PostJob.objects.get)(id=int(post_id), status=1)  # –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            print(f"üìã –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç-–≤–∞–∫–∞–Ω—Å–∏—è: {post.title}")
        except (PostJob.DoesNotExist, ValueError):
            try:
                post = await sync_to_async(PostServices.objects.get)(id=int(post_id), status=1)  # –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                print(f"üõ†Ô∏è –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç-—É—Å–ª—É–≥–∞: {post.title}")
            except (PostServices.DoesNotExist, ValueError):
                print(f"‚ùå –ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
                await callback_query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
                return

        if action == 'approve':
            # –û–¥–æ–±—Ä—è–µ–º –ø–æ—Å—Ç
            post.status = 3  # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
            await sync_to_async(post.save)(update_fields=['status'])
            
            response_text = f"‚úÖ –ü–æ—Å—Ç '{post.title}' –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"
            print(f"‚úÖ –ü–æ—Å—Ç {post_id} –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            
        elif action == 'reject':
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–æ—Å—Ç
            post.status = 2  # –û—Ç–∫–ª–æ–Ω–µ–Ω–æ
            await sync_to_async(post.save)(update_fields=['status'])
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –µ—Å–ª–∏ –ø–æ—Å—Ç –±—ã–ª –ø–ª–∞—Ç–Ω—ã–º
            from ework_core.signals import refund_if_paid
            await sync_to_async(refund_if_paid)(post)
            
            response_text = f"‚ùå –ü–æ—Å—Ç '{post.title}' –æ—Ç–∫–ª–æ–Ω–µ–Ω"
            print(f"‚ùå –ü–æ—Å—Ç {post_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
        try:
            await callback_query.message.edit_text(
                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n{response_text}",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º
            try:
                await callback_query.message.delete()
            except:
                pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await callback_query.answer(response_text, show_alert=True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", show_alert=True)



# Pre-checkout
@dp.pre_checkout_query()
async def pre_checkout_query(pre_checkout: types.PreCheckoutQuery):
    await pre_checkout.bot.answer_pre_checkout_query(
        pre_checkout_query_id=pre_checkout.id,
        ok=True
    )

# –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
@dp.message(lambda msg: msg.successful_payment)
async def successful_payment(message: types.Message):
    payload = message.successful_payment.invoice_payload
    try:
        user_id_str, payment_id_str = payload.split('&&&')
        user_id, payment_id = int(user_id_str), int(payment_id_str)
        
        from ework_core.views import publish_post_after_payment
        success = await sync_to_async(publish_post_after_payment)(user_id, payment_id)
        
        if success:
            await message.answer(_("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."))
        else:
            await message.answer(_("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."))
    except Exception:
        logger.exception("Error handling successful payment payload=%s", payload)
        await message.answer(_("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."))

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
