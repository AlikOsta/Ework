import os
import django
import asyncio
import logging
from logging.handlers import RotatingFileHandler

import httpx
from aiogram import Dispatcher, types
from aiogram.client.bot import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    WebAppInfo,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
)
from asgiref.sync import sync_to_async

from ework_job.models import PostJob
from ework_services.models import PostServices

# Django setup
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ework.settings')
django.setup()

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
from ework_config.bot_config import get_bot_config
cfg = get_bot_config()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –§–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π: –¥–æ 5 —Ñ–∞–π–ª–æ–≤ –ø–æ 5 –ú–ë
file_handler = RotatingFileHandler(
    filename='bot.log',
    maxBytes=5 * 1024 * 1024,
    backupCount=5,
    encoding='utf-8'
)
file_handler.setFormatter(logging.Formatter(
    '%(asctime)s | %(name)s | %(levelname)s | %(message)s'
))

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(
    '%(levelname)s %(message)s'
))

logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
default_props = DefaultBotProperties(parse_mode="HTML")
bot = Bot(token=cfg['bot_token'], default=default_props)
dp = Dispatcher()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∫–ª–∏–µ–Ω—Ç (singleton)
_http_client: httpx.AsyncClient | None = None

def get_http_client() -> httpx.AsyncClient:
    global _http_client
    if _http_client is None:
        _http_client = httpx.AsyncClient(timeout=30.0)
    return _http_client

async def create_invoice_link(
    user_id: int,
    payment_id: int,
    payload: str,
    amount: float,
    order_id: int,
    addons_data: dict | None = None
) -> str | None:
    """
    –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ HTTP API Telegram –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É
    """
    description = f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{order_id}"
    if addons_data:
        addons = []
        if addons_data.get('photo'):
            addons.append("–§–æ—Ç–æ")
        if addons_data.get('highlight'):
            addons.append("–í—ã–¥–µ–ª–µ–Ω–∏–µ")
        if addons_data.get('auto_bump'):
            addons.append("–ê–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ")
        if addons:
            description += f" —Å –æ–ø—Ü–∏—è–º–∏: {', '.join(addons)}"

    price_kopecks = int(amount * 100)
    data = {
        "title": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        "description": description,
        "payload": payload,
        "provider_token": cfg['payment_provider_token'],
        "currency": "UAH",
        "prices": [{"label": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "amount": price_kopecks}],
        "need_name": False,
        "need_phone_number": False,
        "need_email": False,
        "need_shipping_address": False,
        "send_phone_number_to_provider": False,
        "send_email_to_provider": False,
        "is_flexible": False,
    }
    url = f"https://api.telegram.org/bot{cfg['bot_token']}/createInvoiceLink"
    try:
        client = get_http_client()
        response = await client.post(url, json=data)
        response.raise_for_status()
        result = response.json()
        if result.get('ok'):
            return result['result']
        else:
            logger.error("Telegram API error creating invoice: %s", result)
    except Exception:
        logger.exception(
            "Failed to create invoice link for payment %s (user %s)",
            payment_id, user_id
        )
    return None

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    logger.info("User %s invoked /start", message.from_user.id)
    webapp_button = InlineKeyboardButton(
        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App",
        web_app=WebAppInfo(url=cfg['miniapp_url'])
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])
    await message.answer(
        text="–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à Mini App:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data.startswith('approve_') or c.data.startswith('reject_'))
async def handle_moderation_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data.split('_')
    action, _, post_id = data[:3]
    logger.info("Moderation callback: action=%s post_id=%s by user=%s", action, post_id, user_id)
    try:
        # –ò—â–µ–º –ø–æ—Å—Ç –≤ –¥–≤—É—Ö –º–æ–¥–µ–ª—è—Ö
        post = None
        try:
            post = await sync_to_async(PostJob.objects.get)(id=post_id, status=1)
        except PostJob.DoesNotExist:
            post = await sync_to_async(PostServices.objects.get)(id=post_id, status=1)

        if action == 'approve':
            post.status = 3
            await sync_to_async(post.save)()
            await sync_to_async(__import__('ework_core.signals').signsend_telegram_notification_async)(post)
            response_text = f"‚úÖ –ü–æ—Å—Ç '{post.title}' –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"
        else:
            post.status = 2
            await sync_to_async(post.save)()
            await sync_to_async(__import__('ework_core.signals').refund_if_paid)(post)
            response_text = f"‚ùå –ü–æ—Å—Ç '{post.title}' –æ—Ç–∫–ª–æ–Ω–µ–Ω"

        await callback_query.message.delete()
        await callback_query.answer(response_text, show_alert=True)
        logger.info("Moderation done: %s", response_text)
    except Exception:
        logger.exception("Error processing moderation callback")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", show_alert=True)

# Pre-checkout
@dp.pre_checkout_query()
async def pre_checkout_query(pre_checkout: types.PreCheckoutQuery):
    await pre_checkout.bot.answer_pre_checkout_query(
        pre_checkout_query_id=pre_checkout.id,
        ok=True
    )

# –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
@dp.message(lambda msg: msg.successful_payment)
async def successful_payment(message: types.Message):
    payload = message.successful_payment.invoice_payload
    logger.info("Payment successful, payload=%s", payload)
    try:
        user_id_str, payment_id_str = payload.split('&&&')
        user_id, payment_id = int(user_id_str), int(payment_id_str)
        success = await sync_to_async(__import__('ework_core.views').publish_post_after_payment)(user_id, payment_id)
        if success:
            await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        else:
            await message.answer("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    except Exception:
        logger.exception("Error handling successful payment payload=%s", payload)
        await message.answer("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("Webhook deleted, starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
