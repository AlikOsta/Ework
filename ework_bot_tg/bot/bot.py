from aiogram import Dispatcher, types
from aiogram.client.bot import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
import asyncio

BOT_TOKEN = "7554067474:AAG75CqnZSiqKiWgpZ4zX6hNW_e6f9uZn1g"
MINIAPP_URL = "https://e6bd-181-84-216-165.ngrok-free.app/users/index/"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å-—Å—Å—ã–ª–∫–∏
async def create_invoice_link_async(user_id, payment_id, payload, amount, order_id, addons_data):
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É"""
    try:
        print(f"üîß –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
        print(f"üîß User ID: {user_id}")
        print(f"üîß Payment amount: {amount}")
        print(f"üîß Payment order_id: {order_id}")
        print(f"üîß Payment addons: {addons_data}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        description = f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{order_id}"
        
        if addons_data:
            addons = []
            if addons_data.get('photo'):
                addons.append("–§–æ—Ç–æ")
            if addons_data.get('highlight'):
                addons.append("–í—ã–¥–µ–ª–µ–Ω–∏–µ")
            if addons_data.get('auto_bump'):
                addons.append("–ê–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ")
            
            if addons:
                description += f" —Å –æ–ø—Ü–∏—è–º–∏: {', '.join(addons)}"
        
        # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        price_kopecks = int(float(amount) * 100)
        print(f"üîß Price in kopecks: {price_kopecks}")
        print(f"üîß Description: {description}")
        print(f"üîß Payload: {payload}")
        print(f"üîß Provider token: {PAYMENT_PROVIDER_TOKEN}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —Å—Å—ã–ª–∫—É
        print("üîß –í—ã–∑—ã–≤–∞–µ–º bot.create_invoice_link...")
        invoice_link = await bot.create_invoice_link(
            title="–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
            description=description,
            payload=payload,
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency="RUB",
            prices=[
                LabeledPrice(label="–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è", amount=price_kopecks)
            ],
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            send_phone_number_to_provider=False,
            send_email_to_provider=False,
            is_flexible=False,
        )
        
        print(f"‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {invoice_link}")
        return invoice_link
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
        print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        return None

def create_invoice_link(user_id, payment_id, payload, amount, order_id, addons_data):
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ HTTP API"""
    import requests
    
    try:
        print(f"üîß HTTP –º–µ—Ç–æ–¥: —Å–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è payment {payment_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        description = f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{order_id}"
        
        if addons_data:
            addons = []
            if addons_data.get('photo'):
                addons.append("–§–æ—Ç–æ")
            if addons_data.get('highlight'):
                addons.append("–í—ã–¥–µ–ª–µ–Ω–∏–µ")
            if addons_data.get('auto_bump'):
                addons.append("–ê–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ")
            
            if addons:
                description += f" —Å –æ–ø—Ü–∏—è–º–∏: {', '.join(addons)}"
        
        # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        price_kopecks = int(float(amount) * 100)
        
        print(f"üîß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API...")
        print(f"üîß Amount: {amount} —Ä—É–± = {price_kopecks} –∫–æ–ø")
        print(f"üîß Description: {description}")
        
        # HTTP –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/createInvoiceLink"
        
        data = {
            "title": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
            "description": description,
            "payload": payload,
            "provider_token": PAYMENT_PROVIDER_TOKEN,
            "currency": "RUB",
            "prices": [{"label": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "amount": price_kopecks}],
            "need_name": False,
            "need_phone_number": False,
            "need_email": False,
            "need_shipping_address": False,
            "send_phone_number_to_provider": False,
            "send_email_to_provider": False,
            "is_flexible": False,
        }
        
        response = requests.post(url, json=data, timeout=30)
        response.raise_for_status()
        
        result = response.json()
        
        if result.get('ok'):
            invoice_link = result.get('result')
            print(f"‚úÖ HTTP: –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {invoice_link}")
            return invoice_link
        else:
            print(f"‚ùå HTTP: –û—à–∏–±–∫–∞ –æ—Ç Telegram: {result}")
            return None
        
    except Exception as e:
        print(f"‚ùå HTTP: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
        import traceback
        print(f"‚ùå HTTP: Traceback: {traceback.format_exc()}")
        return None
PAYMENT_PROVIDER_TOKEN = '1744374395:TEST:703d48b8cac170d51296'

# –£–∫–∞–∑—ã–≤–∞–µ–º parse_mode —á–µ—Ä–µ–∑ DefaultBotProperties
default_props = DefaultBotProperties(parse_mode="HTML")
bot = Bot(token=BOT_TOKEN, default=default_props)
dp = Dispatcher()

print(f"ü§ñ Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {BOT_TOKEN[:10]}...")
print(f"üîë Provider token: {PAYMENT_PROVIDER_TOKEN[:10]}...")

@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
    """
    webapp_button = InlineKeyboardButton(
        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App",
        web_app=WebAppInfo(url=MINIAPP_URL)
    )
    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])

    await message.answer(
        text="–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à Mini App:",
        reply_markup=keyboard
    )

@dp.message(Command(commands=["invoice"]))
async def send_invoice(message: types.Message):
    await message.bot.send_invoice(
        chat_id=message.chat.id,
        title="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        payload="unique_payload",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=[
            LabeledPrice(label="–¢–æ–≤–∞—Ä", amount=1000),  # 10.00 —Ä—É–±–ª–µ–π (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
        ],
        start_parameter="start_parameter",
        need_email=True,
    )

@dp.pre_checkout_query()
async def pre_checkout_query(pre_checkout: types.PreCheckoutQuery):
    await pre_checkout.bot.answer_pre_checkout_query(
        pre_checkout_query_id=pre_checkout.id,
        ok=True
    )

@dp.message(lambda message: message.successful_payment)
async def successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    payload = message.successful_payment.invoice_payload
    print(f"üí∞ –ü–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞! Payload: {payload}")
    print(f"üí∞ –°—É–º–º–∞: {message.successful_payment.total_amount/100} —Ä—É–±")
    print(f"üí∞ ID –ø–ª–∞—Ç–µ–∂–∞ Telegram: {message.successful_payment.telegram_payment_charge_id}")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ payment_id –∏–∑ payload 
        user_id, payment_id = payload.split('&&&')
        user_id = int(user_id)
        payment_id = int(payment_id)
        
        print(f"üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂: user_id={user_id}, payment_id={payment_id}")
        
        # –í—ã–∑—ã–≤–∞–µ–º Django API –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
        from ework_core.views import publish_post_after_payment
        from asgiref.sync import sync_to_async
        
        publish_post_sync = sync_to_async(publish_post_after_payment)
        success = await publish_post_sync(user_id, payment_id)
        
        if success:
            await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        else:
            await message.answer("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

async def main():
    # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    print("Webhook —É–¥–∞–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
