from decimal import Decimal
from django.utils.translation import gettext_lazy as _
from .models import Package, FreePostRecord


class PricingCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –∞–¥–¥–æ–Ω–∞–º–∏"""
    
    def __init__(self, user, package=None):
        self.user = user
        self.package = package or self._get_default_package()
        
    def _get_default_package(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–∞–∫–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return Package.objects.filter(is_active=True, package_type='PAID').first()
    
    def can_post_free(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"""
        return FreePostRecord.can_user_post_free(self.user)
    
    def calculate_base_price(self):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        if self.can_post_free():
            return Decimal('0.00')
        return self.package.price_per_post if self.package else Decimal('0.00')
    
    def calculate_addons_price(self, photo=False, highlight=False, auto_bump=False):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–¥–¥–æ–Ω–æ–≤"""
        if not self.package:
            return Decimal('0.00')
            
        total = Decimal('0.00')
        
        if photo:
            total += self.package.photo_addon_price
        if highlight:
            total += self.package.highlight_addon_price
        if auto_bump:
            total += self.package.auto_bump_addon_price
            
        return total
    
    def calculate_total_price(self, photo=False, highlight=False, auto_bump=False):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å"""
        base_price = self.calculate_base_price()
        addons_price = self.calculate_addons_price(photo, highlight, auto_bump)
        return base_price + addons_price
    
    def get_pricing_breakdown(self, photo=False, highlight=False, auto_bump=False):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É —Ü–µ–Ω"""
        base_price = self.calculate_base_price()
        addons_price = self.calculate_addons_price(photo, highlight, auto_bump)
        total_price = base_price + addons_price
        
        breakdown = {
            'can_post_free': self.can_post_free(),
            'base_price': base_price,
            'addons': {
                'photo': {
                    'selected': photo,
                    'price': self.package.photo_addon_price if photo and self.package else Decimal('0.00'),
                    'description': _('–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ (30 –¥–Ω–µ–π)')
                },
                'highlight': {
                    'selected': highlight,
                    'price': self.package.highlight_addon_price if highlight and self.package else Decimal('0.00'),
                    'description': _('–í—ã–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç–æ–º (3 –¥–Ω—è)')
                },
                'auto_bump': {
                    'selected': auto_bump,
                    'price': self.package.auto_bump_addon_price if auto_bump and self.package else Decimal('0.00'),
                    'description': _('–ê–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ (7 –¥–Ω–µ–π)')
                }
            },
            'addons_total': addons_price,
            'total_price': total_price,
            'currency': self.package.currency if self.package else None,
            'is_free': total_price == 0
        }
        
        return breakdown
    
    def get_button_config(self, photo=False, highlight=False, auto_bump=False):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
        total_price = self.calculate_total_price(photo, highlight, auto_bump)
        currency = self.package.currency if self.package else None
        
        if total_price == 0:
            return {
                'text': _('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ'),
                'class': 'btn btn-primary',
                'action': 'publish_free'
            }
        else:
            currency_symbol = currency.symbol if currency else '$'
            return {
                'text': _('–û–ø–ª–∞—Ç–∏—Ç—å {price} {currency}').format(
                    price=total_price,
                    currency=currency_symbol
                ),
                'class': 'btn btn-success',
                'action': 'pay_and_publish'
            }


def create_payment_for_post(user, package, photo=False, highlight=False, auto_bump=False, copy_from_id=None):
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —Å –∞–¥–¥–æ–Ω–∞–º–∏"""
    from .models import Payment
    
    print(f"üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    print(f"   –ê–¥–¥–æ–Ω—ã: —Ñ–æ—Ç–æ={photo}, –≤—ã–¥–µ–ª–µ–Ω–∏–µ={highlight}, –∞–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ={auto_bump}")
    print(f"   copy_from_id: {copy_from_id} (—Ç–∏–ø: {type(copy_from_id)})")
    
    # –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    if copy_from_id is not None:
        try:
            from ework_post.models import AbsPost
            original_post = AbsPost.objects.get(id=copy_from_id, user=user)
            
            # –ï—Å–ª–∏ —É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –±—ã–ª–∏ –∞–¥–¥–æ–Ω—ã –∏ –æ–Ω —É–∂–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω
            if (original_post.package and original_post.package.is_paid() and 
                (original_post.has_photo_addon or original_post.has_highlight_addon or original_post.has_auto_bump_addon)):
                
                print(f"üîÑ –ü–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞:")
                print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç: {original_post.package.name}")
                print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞–¥–¥–æ–Ω—ã: —Ñ–æ—Ç–æ={original_post.has_photo_addon}, –≤—ã–¥–µ–ª–µ–Ω–∏–µ={original_post.has_highlight_addon}, –∞–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ={original_post.has_auto_bump_addon}")
                print(f"   –ü–†–ê–í–ò–õ–û: –ü—Ä–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ù–ï –±–µ—Ä–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–ø–ª–∞—Ç—É –∑–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∞–¥–¥–æ–Ω—ã")
                
                # –ü—Ä–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–¥–æ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
                photo = original_post.has_photo_addon
                highlight = original_post.has_highlight_addon  
                auto_bump = original_post.has_auto_bump_addon
                
                print(f"   –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–¥–æ–Ω—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: —Ñ–æ—Ç–æ={photo}, –≤—ã–¥–µ–ª–µ–Ω–∏–µ={highlight}, –∞–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ={auto_bump}")
                
        except AbsPost.DoesNotExist:
            print(f"‚ö†Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç {copy_from_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    calculator = PricingCalculator(user, package)
    total_price = calculator.calculate_total_price(photo, highlight, auto_bump)
    
    print(f"   –ú–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ: {calculator.can_post_free()}")
    print(f"   –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price}")
    
    if total_price == 0:
        print(f"üí∏ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è - –ø–ª–∞—Ç–µ–∂ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è")
        return None  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    
    payment = Payment.objects.create(
        user=user,
        package=package,
        amount=total_price,
        order_id=Payment.generate_order_id(user.id)
    )
    
    print(f"üí≥ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment.id} –Ω–∞ —Å—É–º–º—É {total_price}")
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–¥–æ–Ω–∞—Ö
    payment.set_addons(photo=photo, highlight=highlight, auto_bump=auto_bump)
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å copy_from_id –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    if copy_from_id is not None:
        if not payment.addons_data:
            payment.addons_data = {}
        payment.addons_data['copy_from_id'] = copy_from_id
        print(f"üíæ –î–æ–±–∞–≤–ª–µ–Ω copy_from_id –≤ –ø–ª–∞—Ç–µ–∂: {copy_from_id}")
    
    payment.save()
    
    return payment
